"use server";

import { clerkClient } from "@clerk/nextjs/server";

interface CalendarEvent {
  summary: string;
  description: string;
  start: {
    dateTime: string;
    timeZone: string;
  };
  end: {
    dateTime: string;
    timeZone: string;
  };
  reminders: {
    useDefault: boolean;
    overrides?: {
      method: string;
      minutes: number;
    }[];
  };
}

/**
 * Creates calendar events for flashcard reminders using Anki-style SRS schedule
 * @param userId - The Clerk user ID
 * @param flashcardTitle - Title for the flashcard deck
 * @param chatTitle - Title of the chat/conversation
 * @param chatId - The chat ID for creating the review URL
 * @returns Promise<boolean> - Success status
 */
export async function createFlashcardReminders(
  userId: string,
  flashcardTitle: string,
  chatTitle: string,
  chatId: string
): Promise<boolean> {
  try {
    const client = await clerkClient();
    const tokenResponse = await client.users.getUserOauthAccessToken(
      userId,
      "oauth_google"
    );

    if (!tokenResponse.data || tokenResponse.data.length === 0) {
      console.error("No Google OAuth token found for user");
      return false;
    }

    const accessToken = tokenResponse.data[0].token;
    const creationDate = new Date();

    // Anki-style SRS schedule: D+3, D+5, D+7, D+9
    const scheduleOffsets = [3, 5, 7, 9];
    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

    // Create the review URL
    const reviewUrl = `${process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"}/chat/${chatId}`;

    const events: CalendarEvent[] = scheduleOffsets.map((offset, index) => {
      const reminderDate = new Date(creationDate);
      reminderDate.setDate(reminderDate.getDate() + offset);

      // Set time to 12:00 PM
      reminderDate.setHours(12, 0, 0, 0);

      const endTime = new Date(reminderDate);
      endTime.setMinutes(endTime.getMinutes() + 30); // 30-minute reminder

      return {
        summary: `ðŸ“š Flashcard Review - ${flashcardTitle}`,
        description: `Time to review your flashcards from "${chatTitle}"!\n\nThis is reminder ${index + 1} of 4 in your spaced repetition schedule.\n\nðŸ§  Spaced repetition helps improve long-term retention by reviewing material at increasing intervals.\n\nðŸ”— Click here to review: ${reviewUrl}\n\nGenerated by VibeNote`,
        start: {
          dateTime: reminderDate.toISOString(),
          timeZone: timeZone,
        },
        end: {
          dateTime: endTime.toISOString(),
          timeZone: timeZone,
        },
        reminders: {
          useDefault: false,
          overrides: [
            {
              method: "popup",
              minutes: 15, // 15 minutes before
            },
            {
              method: "email",
              minutes: 60, // 1 hour before
            },
          ],
        },
      };
    });

    // Create events in Google Calendar
    const results = await Promise.allSettled(
      events.map(async (event) => {
        const response = await fetch(
          "https://www.googleapis.com/calendar/v3/calendars/primary/events",
          {
            method: "POST",
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify(event),
          }
        );

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(
            `Failed to create calendar event: ${response.status} ${errorText}`
          );
        }

        return await response.json();
      })
    );

    // Check if all events were created successfully
    const failedEvents = results.filter(
      (result) => result.status === "rejected"
    );

    if (failedEvents.length > 0) {
      console.error("Some calendar events failed to create:", failedEvents);
      return false;
    }

    console.log(
      `Successfully created ${results.length} flashcard reminder events`
    );
    return true;
  } catch (error) {
    console.error("Error creating flashcard reminders:", error);
    return false;
  }
}
